from typing import List, Dict

from fastapi import FastAPI, WebSocket, Request
from gpt4all import GPT4All

THRESHOLD = 10
ABBREV = {'numcs': 'Numerical Methods for Computer Science'}
HARD_CODED = {'Numerical Methods for Computer Science': 'its a hard course, but \n'}


def check_input(usr_input: str) -> bool:
    """
    Given some input, check if its ETH specific related
    :param usr_input: str
    :return: bool: representing if ETH related
    """
    words = {'ETH', 'with', 'course', 'how'}
    score = 0
    for word in words:
        if word in usr_input:
            score += 1
    for abbrev in ABBREV.keys():
        if abbrev in usr_input:
            score += THRESHOLD
    print(score)
    return score > THRESHOLD


class Bot:
    def __init__(self, max_tokens=0) -> None:
        self.max_tokens = max_tokens
        self.model = GPT4All('gpt4all-13b-snoozy-q4_0.gguf')

    def generate(self, prompt: str) -> str:
        """
        Given a prompt, generate the response from the bot.
        :param prompt: Input to the model, string
        :return: A string of the response generated by the bot
        """
        # TODO: if the model cannot provide a specific answer redirect
        return self.model.generate(prompt, max_tokens=self.max_tokens)

    def respond(self, usr_input: str) -> str:
        """
        given an input, give a tailored response
        :param usr_input:
        :return: original response if good, filtered and modified after
        """
        if check_input(usr_input):
            context = None
            for course in ABBREV.keys():
                if course in usr_input:
                    context = ABBREV[course]
                    print('context', course)

            if context is not None:
                h_rsp = HARD_CODED[context]
                bot_resp = self.model.generate(f'Give me hints on {context}')  # TODO change prompt or dict
                rsp = h_rsp + bot_resp # TODO modify convo history
            else:
                rsp = 'Im sorry I cannot help you with that, please visit ethz.ch' # TODO give better hint
        else:
            rsp = self.model.generate(usr_input)

        return rsp

    def start_chat_session(self, responses: list) -> None:
        chat = True
        with self.model.chat_session():
            # TODO initialize chat session
            while chat:
                new_input = input('Type something > ')
                if new_input == 'END':
                    chat = False
                    print(self.get_chat_session())  # TODO store chat session
                else:
                    new_resp = self.generate(new_input)
                    print(new_resp)
                    responses.append(new_resp)
                    print(self.generate(new_input))

    def get_chat_session(self) -> List[Dict[str, str]]:
        """
        Return the current chat session of the bot
        :return: List of Dicts
        """
        return self.model.current_chat_session
