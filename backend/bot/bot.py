from typing import List, Dict
from gpt4all import GPT4All
from backend.bot.context import *
from backend.bot.BOT_ETH_CONTEXT import prompt_scan


class Bot:
    def __init__(self, max_tokens=0) -> None:
        self.max_tokens = max_tokens
        self.model = GPT4All('gpt4all-13b-snoozy-q4_0.gguf')

    def generate(self, prompt: str) -> str:
        """
        Given a prompt, generate the response from the bot.
        :param prompt: Input to the model, string
        :return: A string of the response generated by the bot
        """
        # TODO: if the model cannot provide a specific answer redirect
        prompt_ls = prompt.split()
        for p in prompt_ls:
            full = map_course(p)
            if full is not None:
                resp_front = return_review(full)
                resp_back = self.model.generate(f'tips on the course {full} ',
                                                max_tokens=self.max_tokens)
                # TODO update chat history
                return resp_front + ' \t \n' + resp_back

        return self.model.generate(prompt, max_tokens=self.max_tokens)

    def respond(self, usr_input: str) -> str:
        """
        given an input, give a tailored response
        :param usr_input:
        :return: original response if good, filtered and modified after
        """
        scanned_res = prompt_scan(usr_input)

        if scanned_res is not None:
            return scanned_res
        else:
            return self.model.generate(usr_input)

    def start_chat_session(self, responses: list) -> None:
        chat = True
        with self.model.chat_session():
            # TODO initialize chat session
            while chat:
                new_input = input('Type something > ')
                if new_input == 'END':
                    chat = False
                    print(self.get_chat_session())  # TODO store chat session
                else:
                    new_resp = self.generate(new_input)
                    print(new_resp)
                    responses.append(new_resp)
                    print(self.generate(new_input))

    def get_chat_session(self) -> List[Dict[str, str]]:
        """
        Return the current chat session of the bot
        :return: List of Dicts
        """
        return self.model.current_chat_session
